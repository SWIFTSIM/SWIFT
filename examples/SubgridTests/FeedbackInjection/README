# Intro
This example consists of a periodic box filled with gas particles of equal mass. In the (xy) midplane (i.e. centre of the box), the particles are placed with a uniform probability distribution and in the z-axis, the particles are placed with a Gaussian distribution function \rho(z) = \exp(-z^2 / 2 h^2), where h is the means inter-particle separation in the midplane.

An individual star particle lies at the center, ready to explode as a supernova.

This example's purpose is to test the isotropy distribution of fluxes (metal, momentum, mass, and internal energy) using the GEAR mechanical feedback and compare it with the GEAR fiducial model.

# Configure
To run this example with the GEAR model,

```
./configure --disable-mpi --with-chemistry=GEAR_10 --with-cooling=grackle_0 --with-stars=GEAR --with-star-formation=GEAR --with-feedback=X --with-kernel=wendland-C2 --with-adaptive-softening --with-grackle=path/to/grackle
```

where X can be:
- GEAR : GEAR thermal feedback,
- GEAR-mechanical_1 : GEAR mechanical feedback mode 1, Fire-2-like implementation,
- GEAR-mechanical_2 : GEAR mechanical feedback mode 2, Fire-3-like implementation.

Then, type

```
make -j
```

You can remove the adaptive softening. In this case, you may need to change the default `max_physical_baryon_softening` value.

# ICs
The run.sh script calls the `makeIC.py' script with default values. You can experiment by changing the ICs. Run `python3 makeIC.py --help` to get the list of parameters.

# Run
Type run.sh, and let's go!

# Multiple runs
To perform many runs to get statistics for the isotropy, you can use:

```
run_name="GEAR_MECH1" n_runs=100 ./run_multiple.sh
```

# Isotropy checking
To verify how the feedback distributes its quantities, such as metal mass, momentum, and energy, run the Python script `isotropy_check.py`. This script will compute the metal mass flux per solid angle seen by the stars over many runs (see previous section) and plot the median.

Note: It can be useful to disable the momentum injection of the mechanical feedback, since it will biase the computations of the face area by the Python script. You can comment the following ines in `src/feedback/GEAR_mechanical/feedbac_iact.h`:

```
  /* Now we can give momentum, thermal and kinetic energy to the xpart. */
  for (int i = 0; i < 3; i++) {
    xpj->feedback_data.delta_p[i] += dp_prime[i];
  }
```