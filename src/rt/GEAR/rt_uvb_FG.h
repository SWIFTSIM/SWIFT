#ifndef SWIFT_RT_GEAR_UVB_FG_H
#define SWIFT_RT_GEAR_UVB_FG_H

/**
 * @file src/rt/GEAR/rt_uvb_FG.h
 * @brief Functions related to the Faucher-Guig√®re 2009 UV background spectrum
 * For now, we implement only the z = 2 spectrum
 */

#include "inline.h"
#include <gsl/gsl_errno.h>
#include <gsl/gsl_spline.h>

#include <math.h>

#define SPEC_SIZE 123

double nu_storage[SPEC_SIZE] = {
  1.68577953e+15, 1.75372612e+15, 1.83760538e+15, 1.93433226e+15,
  2.04863232e+15, 2.14293949e+15, 2.23508399e+15, 2.32678349e+15,
  2.39801492e+15, 2.43606402e+15, 2.45244865e+15, 2.50682664e+15,
  2.57485844e+15, 2.65638516e+15, 2.73394328e+15, 2.80755195e+15,
  2.88115605e+15, 2.93664999e+15, 3.00230731e+15, 3.05991362e+15,
  3.10518251e+15, 3.14773783e+15, 3.18758295e+15, 3.24812561e+15,
  3.29682564e+15, 3.35172718e+15, 3.43091269e+15, 3.55338594e+15,
  3.68853001e+15, 3.83006526e+15, 3.99535285e+15, 4.14381190e+15,
  4.29538051e+15, 4.46648947e+15, 4.65270998e+15, 4.85055549e+15,
  5.05872517e+15, 5.22829679e+15, 5.41828713e+15, 5.63547131e+15,
  5.84710882e+15, 6.07435630e+15, 6.30988563e+15, 6.57202287e+15,
  6.80927640e+15, 7.05734759e+15, 7.37582469e+15, 7.81173204e+15,
  8.26114781e+15, 8.63593022e+15, 8.99543527e+15, 9.31440025e+15,
  9.59807510e+15, 9.67020488e+15, 9.74259292e+15, 9.81572183e+15,
  9.92634573e+15, 1.02286437e+16, 1.04953509e+16, 1.08200152e+16,
  1.10542921e+16, 1.13174551e+16, 1.15625865e+16, 1.17933824e+16,
  1.19726459e+16, 1.21973825e+16, 1.23507823e+16, 1.25209141e+16,
  1.26430518e+16, 1.27571241e+16, 1.28396722e+16, 1.29490594e+16,
  1.30366370e+16, 1.31439204e+16, 1.32367522e+16, 1.32918073e+16,
  1.33572120e+16, 1.35935243e+16, 1.39232497e+16, 1.44336332e+16,
  1.51528667e+16, 1.61691120e+16, 1.74487029e+16, 1.88295536e+16,
  2.03196766e+16, 2.19277399e+16, 2.36630568e+16, 2.55356911e+16,
  2.75565275e+16, 2.97373526e+16, 3.20907986e+16, 3.46305411e+16,
  3.73713644e+16, 4.03290804e+16, 4.35209048e+16, 4.69653660e+16,
  5.06823907e+16, 5.46935403e+16, 5.90220907e+16, 6.36930708e+16,
  6.87334772e+16, 7.41726749e+16, 8.00421674e+16, 8.63759817e+16,
  9.32109311e+16, 1.00586612e+17, 1.08545766e+17, 1.17134649e+17,
  1.26402992e+17, 1.36404470e+17, 1.47197373e+17, 1.58844064e+17,
  1.71412235e+17, 1.84974615e+17, 1.99610161e+17, 2.15403649e+17,
  2.32446521e+17, 2.50837777e+17, 2.70684545e+17, 2.87090128e+17,
  3.00811236e+17, 3.13474549e+17, 3.25449001e+17
};

double Jnu_storage[SPEC_SIZE] = {
  1.8038842e-21, 1.7342217e-21, 1.6497912e-21, 1.5547993e-21,
  1.4536286e-21, 1.3663464e-21, 1.2922777e-21, 1.2081748e-21,
  1.1428823e-21, 1.0275246e-21, 9.3718317e-22, 8.5911941e-22,
  7.9172437e-22, 7.1320658e-22, 6.4922763e-22, 5.8235270e-22,
  5.2712198e-22, 4.7274930e-22, 4.1957302e-22, 3.7400823e-22,
  3.3729727e-22, 3.0166518e-22, 2.7115531e-22, 2.4583931e-22,
  2.2235202e-22, 2.0291003e-22, 1.8523499e-22, 1.7523815e-22,
  1.6700816e-22, 1.5868656e-22, 1.5124599e-22, 1.4513110e-22,
  1.3951892e-22, 1.3405706e-22, 1.2891566e-22, 1.2506268e-22,
  1.2100931e-22, 1.1783509e-22, 1.1453773e-22, 1.1213221e-22,
  1.0895531e-22, 1.0670533e-22, 1.0459126e-22, 1.0154110e-22,
  9.9742493e-23, 9.7590255e-23, 9.6140059e-23, 9.2656712e-23,
  8.9253816e-23, 8.7581233e-23, 8.5845456e-23, 8.4095680e-23,
  8.3265451e-23, 7.5975806e-23, 6.8279105e-23, 6.3069154e-23,
  5.8080059e-23, 5.3280285e-23, 4.8845536e-23, 4.4566366e-23,
  4.0238317e-23, 3.6545188e-23, 3.2579764e-23, 2.9378897e-23,
  2.5919188e-23, 2.2925257e-23, 2.0295465e-23, 1.7712672e-23,
  1.5973245e-23, 1.4239324e-23, 1.2604452e-23, 1.1222172e-23,
  9.8764292e-24, 8.9325069e-24, 8.0566101e-24, 7.1808960e-24,
  6.5115405e-24, 5.8884585e-24, 5.4705052e-24, 5.1248093e-24,
  4.8699935e-24, 4.5824245e-24, 4.2835128e-24, 4.0007661e-24,
  3.7335724e-24, 3.4929390e-24, 3.2650945e-24, 3.0470332e-24,
  2.8459041e-24, 2.6780482e-24, 2.5285013e-24, 2.3972665e-24,
  2.2899420e-24, 2.1819643e-24, 2.0825438e-24, 1.9909666e-24,
  1.8970865e-24, 1.8016218e-24, 1.7052711e-24, 1.6020210e-24,
  1.4875775e-24, 1.3755699e-24, 1.2646024e-24, 1.1558293e-24,
  1.0537761e-24, 9.5674164e-25, 8.6431286e-25, 7.7951403e-25,
  7.0011366e-25, 6.2514603e-25, 5.5913637e-25, 4.9801871e-25,
  4.4321240e-25, 3.9279849e-25, 3.4869927e-25, 3.0929337e-25,
  2.7342832e-25, 2.4152090e-25, 2.1440552e-25, 1.9604532e-25,
  1.8096514e-25, 1.6882352e-25, 1.5906691e-25
};

gsl_interp_accel *uvb_accel;
gsl_spline *uvb_interp;

// struct uvb_spectrum
// {
//   /* data */
//   //double nu[SPEC_SIZE];
//   //double Ju[SPEC_SIZE];
// 
//   gsl_interp_accel *spec_acc;
//   gsl_spline *spec_interp;
// };

__attribute__((always_inline)) INLINE static void uvb_init_spectrum(void)
{
  uvb_accel = gsl_interp_accel_alloc();
  uvb_interp = gsl_spline_alloc(gsl_interp_linear,SPEC_SIZE);
  gsl_spline_init(uvb_interp,nu_storage,Jnu_storage,SPEC_SIZE);
}

__attribute__((always_inline)) INLINE static void uvb_close_spectrum(void)
{
  gsl_spline_free(uvb_interp);
  gsl_interp_accel_free(uvb_accel);
}


/**
 * @brief Return the specific intensity of the uvb spectrum
 *
 * @param nu frequency at which to compute specific intensity
 */
__attribute__((always_inline)) INLINE double uvb_spectrum_intensity(
    const double nu) {
  //printf("%+.5e  :  ",nu);
  //printf("nu = %.4e, ",nu);
  double jnu = gsl_spline_eval(uvb_interp,nu,uvb_accel);
  //printf("Jnu = %.4e \n",jnu);

  //printf("nu = %.4e,  Jnu = %.4e \n",nu,jnu);
  return jnu;
}

/**
 * Return the uvb spectrum energy density
 *
 * @param nu frequency at which to compute specific intensity
 * @param c speed of light
 */
__attribute__((always_inline)) INLINE double uvb_spectrum_energy_density(
    const double nu, const double c) {
  return 4. * M_PI / c * uvb_spectrum_intensity(nu);
}

/**
 * Return the max integration frequency
 *
 */
__attribute__((always_inline)) INLINE double uvb_max_frequency(void)
{
  return nu_storage[SPEC_SIZE - 10];
}

#endif
